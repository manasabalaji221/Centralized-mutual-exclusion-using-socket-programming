//Name: Manasa Balaji

//NetId: mxb9247
//Student ID: 1001689246
//References:https://www.geeksforgeeks.org/multi-threaded-chat-application-set-1/

//References:https://www.geeksforgeeks.org/multi-threaded-chat-application-set-2/


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project2;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JOptionPane;
import static project2.Client1.ip;
import static project2.Server.username;
import java.util.LinkedList; 
import java.util.Queue; 
import java.util.concurrent.TimeUnit;
/**
 *
 * @author manas
 */
public class Server extends javax.swing.JFrame {
    static String username;
    static InetAddress ip;
    static Socket s;
    static DataOutputStream dos;
    static DataInputStream dis;
    final static int ServerPort = 7654;

    
    static ServerSocket ss;
    static int i = 0; 
    static int no=0;

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel8 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("SERVER");

        jLabel2.setText("Client 1");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setText("Client 2");

        jLabel4.setText("Client 3");

        jLabel5.setText("-----");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setText("-----");

        jLabel7.setText("-----");

        jLabel8.setColumns(20);
        jLabel8.setRows(5);
        jScrollPane2.setViewportView(jLabel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(jLabel1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addGap(48, 48, 48)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jLabel2MouseClicked
        static Vector<ClientHandler> ar = new Vector<>(); 
        static Queue<Integer> q = new LinkedList<>(); 

    /**
     * @param args the command line arguments
     */
    public void setUsername(String data){
        jLabel5.setText(data);
        revalidate();
        repaint();
    }
    public static void main(String[] args) throws Exception  
    {  ss = new ServerSocket(ServerPort); 
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        

        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
        
//         try{
//            new Server().setVisible(true);
//        }
//        catch(Exception e)
//        {
//        }
//         
        while(true)
        {  // jLabel8.setText(" ");
            s = ss.accept(); 
            System.out.println("New client request received : " + s); 
            System.out.println(s.getInetAddress());
            // obtain input and output streams 
            dis = new DataInputStream(s.getInputStream()); 
            dos = new DataOutputStream(s.getOutputStream()); 
            String msg="Connected";
            dos.writeUTF(msg);
//            Server server=new Server();
            System.out.println("Creating a new handler for this client..."); 
            username = dis.readUTF(); 
            System.out.println(username);
            if(i==0){
            jLabel5.setText(username);
            }
            else if(jLabel6.getText().toString()=="-----")
            {
            jLabel6.setText(username);
            }
            else {
            jLabel7.setText(username);
            }
            
            jLabel8.setText(jLabel8.getText().toString()+"New client request received : \n " + s+ " "+username);
            jLabel8.setText(jLabel8.getText().toString()+ System.getProperty("line.separator")+"\n"+" Connected..."+"\n" );
            jLabel8.setText(jLabel8.getText().toString()+ System.getProperty("line.separator")+"Creating a new handler for this client...Adding this client to active client list");
            i++;
            
            ClientHandler mtch = new ClientHandler(s,"client " + i, dis, dos,username);
            Thread t = new Thread(mtch); 
            System.out.println("Adding this client to active client list"); 
            //setUsername(username);
//            jLabel8.setText("New client request received : " + s+"\nConnected\nCreating a new handler for this client...Adding this client to active client list");
            // add this client to active clients list 
            ar.add(mtch); 
  
            // start the thread. 
            t.start();
             
            
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    public static javax.swing.JTextArea jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}



// ClientHandler class 

 class ClientHandler extends Server implements Runnable  
{ 
    Scanner scn = new Scanner(System.in); 
    private String name; 
    final DataInputStream dis; 
    final DataOutputStream dos; 
    Socket s; 
    boolean isloggedin; 
    Server server; 
    String userName;
    String received,httpMsg; 
            int y;
            long timeBefore, timeAfter, total;

    // constructor 
    public ClientHandler(Socket s, String name, 
                            DataInputStream dis, DataOutputStream dos,String user) { 
        this.dis = dis; 
        this.dos = dos; 
        this.name = name; 
        this.s = s; 
        this.isloggedin=true; 
       // server.setUsername(user);
        this.userName=user;

    } 
  
    @Override
    public void run() { 
        
        //while(true)
        while (this.isloggedin)  
        {   try
            {   System.out.println("inside run");
                // receive the string 
                received = dis.readUTF(); 
                httpMsg = dis.readUTF();
                timeBefore= System.currentTimeMillis();

                
//                received = dis.readUTF();
                System.out.println("received msg:"+ received);
                System.out.println(httpMsg);
                
                
                 if(!received.equals("logout")){
                 try{
                  
                    jLabel8.setText(jLabel8.getText().toString()+ System.getProperty("line.separator")
                            +"Random number received :\n " + received);
                    System.out.println();
                    int n=Integer.parseInt(received.toString());
                    q.add(n);
 
                    received=null;
                    httpMsg =null;        
                     }
                 
                  catch(Exception e){
                  System.out.println(e);
                   }
            
            
                   y=q.remove();
                   if(y>=3 && y<=10)
                  {
                  int x=y;
                    jLabel8.setText(jLabel8.getText().toString()+  System.getProperty("line.separator")+ "Server wait for"+x+ " seconds");
                     timeAfter= System.currentTimeMillis();
                     total=timeAfter-timeBefore;
                     Integer i = x;
                        Long l = new Long(i);
                                       
                    System.out.println("before:"+timeBefore+" After:"+timeAfter+"*************************************  "+(total+1/1000)+l);
                    try{
                     Thread.sleep(x*1000);
                    }
                     catch(Exception e){
                
                    }
                    System.out.println(jLabel8.getText().toString()+ System.getProperty("line.separator")+
                           "Server wait ended "+"Server waited for "+x+ "seconds for client "+username);
                   jLabel8.setText(jLabel8.getText().toString()+ System.getProperty("line.separator")+
                           "Server wait ended"+" Server waited for "+x+ "seconds ");
                    long msgToClient=((total+1/1000)+x);
                    RawHttp rawHttp = new RawHttp();
                        String timeMsg;
                        timeMsg =rawHttp.sendTime(total);
                        dos.writeUTF(timeMsg);
//                    msgToClient("Server waited for "+x+ "seconds. Total response time is:"+    );
                    }
                }    
                  
                else if(received.equals("logout")){ 
                    System.out.println("Client "+username+" requested logout");
                    System.out.println("Client "+username+ " disconnected");
                    this.isloggedin=false; 
                    this.s.close(); 
                    break; 
                } 
                  
                // break the string into message and recipient part 
//                StringTokenizer st = new StringTokenizer(received, "#"); 
//                String MsgToSend = st.nextToken(); 
//                String recipient = st.nextToken(); 
//  
//                // search for the recipient in the connected devices list. 
//                // ar is the vector storing client of active users 
//                for (ClientHandler mc : Server.ar)  
//                { 
//                    // if the recipient is found, write on its 
//                    // output stream 
//                    if (mc.name.equals(recipient) && mc.isloggedin==true)  
//                    { 
//                        mc.dos.writeUTF(this.name+" : "+MsgToSend); 
//                        break; 
//                    } 
//                } 
            } catch (IOException e) { 
                  
                e.printStackTrace(); 
            } 
              
        } 
        try
        { 
            // closing resources 
            this.dis.close(); 
            this.dos.close(); 
              
        }catch(IOException e){ 
            e.printStackTrace(); 
        } 
    } 
} 
